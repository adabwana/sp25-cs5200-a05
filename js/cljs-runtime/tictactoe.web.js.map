{"version":3,"sources":["tictactoe/web.cljs"],"mappings":"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","names":["js/tictactoe","js/tictactoe.web","js/tictactoe.web.web-state","tictactoe.web/web-state","reagent.core.atom","tictactoe.cljs.core.init_game","tictactoe.web/styles","tictactoe.cljs.xxxconfig/get-config","tictactoe.web/cell-style-memo","cljs.core/memoize","mark","cljs.core.merge","cljs.core/deref","cljs.core._EQ_","tictactoe.web/cell-click-handler","row","col","game-over?","ai-enabled?","current-player","ai-player","cljs.core/not","and__5000__auto__","cljs.core.swap_BANG_","tictactoe.cljs.core/make-move","tictactoe.web/cell-component","game-state","cljs.core.get_in","reagent.core.create_class","p__23043","p__23044","vec__23045","cljs.core.nth","vec__23048","this","_","old-mark","new-mark","cljs.core.not_EQ_","tictactoe.web/board-component","old-argv","new-argv","cljs.core/second","iter__5480__auto__","s__23054","cljs.core/LazySeq","temp__5823__auto__","cljs.core/seq","xs__6383__auto__","cljs.core/first","iterys__5476__auto__","s__23056","cljs.core/chunked-seq?","c__5478__auto__","size__5479__auto__","cljs.core/count","b__23058","cljs.core/chunk-buffer","i__23057","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__23055","cljs.core/chunk-rest","cljs.core/cons","cljs.core/rest","fs__5477__auto__","cljs.core.concat","iter__23053","cljs.core.range","tictactoe.web/controls-component","cljs.core/reset!","cljs.core/update-in","tictactoe.web/status-component","old-state","new-state","temp__5821__auto__","winner","tictactoe.web/game-component","tictactoe.web/mount-root","root-el","js/document","reagent.dom.render","tictactoe.web/init!","cljs.core/chunk-first"],"sourcesContent":["(ns tictactoe.web\n  (:require\n   [reagent.core :as r]\n   [reagent.dom :as rdom]\n   [tictactoe.cljs.core :as core]\n   [tictactoe.cljs.xxxconfig :as config]\n   [tictactoe.cljs.board :as board]))\n\n;; ## Game State\n\n(defonce web-state\n  (r/atom (core/init-game)))\n\n;; ## Styling Constants\n\n(def styles\n  (r/atom (config/get-config [:styles])))\n\n;; ## Memoized Component Helpers\n\n(def cell-style-memo\n  (memoize\n   (fn [mark]\n     (merge (:cell @styles)\n            (when (= mark \\space)\n              {:hover {:background \"#f0f0f0\"}})))))\n\n(def cell-click-handler\n  (memoize\n   (fn [row col mark game-over? ai-enabled? current-player ai-player]\n     (when (and (not game-over?)\n                (= mark \\space)\n                (not (and ai-enabled?\n                          (= current-player ai-player))))\n       #(swap! web-state core/make-move row col)))))\n\n;; ## Game Board Component\n\n(defn cell-component [row col mark]\n  (let [game-state @web-state\n        ai-enabled? (get-in game-state [:config :ai-enabled])\n        current-player (:current-player game-state)\n        ai-player (get-in game-state [:config :ai-player])]\n    (r/create-class\n     {:component-name (str \"Cell-\" row \"-\" col)\n      :should-component-update\n      (fn [this [_ _ _ old-mark] [_ _ _ new-mark]]\n        (not= old-mark new-mark))\n      :reagent-render\n      (fn [row col mark]\n        [:div {:style (cell-style-memo mark)\n               :on-click (cell-click-handler row col mark\n                                             (:game-over? game-state)\n                                             ai-enabled?\n                                             current-player\n                                             ai-player)}\n         (when (not= mark \\space)\n           [:span {:style {:color (if (= mark \\X) \"#e74c3c\" \"#3498db\")}}\n            mark])])})))\n\n(def board-component\n  (r/create-class\n   {:component-name \"Board\"\n    :should-component-update\n    (fn [this old-argv new-argv]\n      (not= (:board (second old-argv))\n            (:board (second new-argv))))\n    :reagent-render\n    (fn []\n      [:div {:style (:board @styles)}\n       (for [row (range (get-in @web-state [:config :board-size]))\n             col (range (get-in @web-state [:config :board-size]))\n             :let [mark (get-in (:board @web-state) [row col])]]\n         ^{:key (str row \"-\" col)}\n         [cell-component row col mark])])}))\n\n;; ## Control Components\n\n(def controls-component\n  (r/create-class\n   {:component-name \"Controls\"\n    :should-component-update\n    (fn [this old-argv new-argv]\n      (not= (get-in (second old-argv) [:config :ai-enabled])\n            (get-in (second new-argv) [:config :ai-enabled])))\n    :reagent-render\n    (fn []\n      [:div {:style (:controls @styles)}\n       [:button\n        {:style (:button @styles)\n         :on-click #(reset! web-state (core/init-game))}\n        \"New Game\"]\n       [:button\n        {:style (:button @styles)\n         :on-click #(swap! web-state update-in [:config :ai-enabled] not)}\n        (if (get-in @web-state [:config :ai-enabled])\n          \"Disable AI\"\n          \"Enable AI\")]])}))\n\n(def status-component\n  (r/create-class\n   {:component-name \"Status\"\n    :should-component-update\n    (fn [this old-argv new-argv]\n      (let [old-state (second old-argv)\n            new-state (second new-argv)]\n        (or (not= (:game-over? old-state) (:game-over? new-state))\n            (not= (:winner old-state) (:winner new-state))\n            (not= (:current-player old-state) (:current-player new-state)))))\n    :reagent-render\n    (fn []\n      [:div {:style (:status @styles)}\n       (cond\n         (:game-over? @web-state)\n         (if-let [winner (:winner @web-state)]\n           (str \"Player \" winner \" wins!\")\n           \"Game is a draw!\")\n\n         :else\n         (str \"Current player: \" (:current-player @web-state)\n              (when (and (get-in @web-state [:config :ai-enabled])\n                         (= (:current-player @web-state) (get-in @web-state [:config :ai-player])))\n                \" (AI's turn)\")))])}))\n\n;; ## Main Game Component\n\n(def game-component\n  (r/create-class\n   {:component-name \"Game\"\n    :reagent-render\n    (fn []\n      [:div {:style {:display \"flex\"\n                     :flex-direction \"column\"\n                     :align-items \"center\"\n                     :font-family \"sans-serif\"}}\n       [:h1 {:style {:color \"#2c3e50\"\n                     :margin-bottom \"20px\"}}\n        \"Tic Tac Toe\"]\n       [board-component @web-state]\n       [status-component @web-state]\n       [controls-component @web-state]])}))\n\n;; ## Game Initialization\n\n(defn mount-root []\n  (let [root-el (.getElementById js/document \"app\")]\n    (rdom/render [game-component] root-el)))\n\n(defn init! []\n  (mount-root))"]}