{"version":3,"sources":["tictactoe/cljs/board.cljc"],"mappings":"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","names":["tictactoe.cljs.board/init-board","size","cljs.core/vec","cljs.core.repeat","tictactoe.cljs.board/valid-move?","board","row","col","cljs.core/count","cljs.core._EQ_","cljs.core.get_in","tictactoe.cljs.board/place-mark","mark","cljs.core/assoc-in","tictactoe.cljs.board/board-full?","p1__22750#","cljs.core/not-any?","cljs.core/some","tictactoe.cljs.board/get-row","cljs.core.nth","tictactoe.cljs.board/get-col","p1__22751#","cljs.core.mapv","p__22757","vec__22758","tictactoe.cljs.board/get-diagonal","dx","dy","r","c","result","cljs.core.conj","tictactoe.cljs.board/check-line","line","player","win-length","len","start","p1__22769#","cljs.core/every?","cljs.core.subvec","tictactoe.cljs.board/check-winner","or__5002__auto__","p1__22773#","cljs.core.range","p1__22774#","p1__22775#","vec__22785","iter__5480__auto__","s__22789","cljs.core/LazySeq","temp__5823__auto__","cljs.core/seq","xs__6383__auto__","cljs.core/first","iterys__5476__auto__","s__22791","cljs.core/chunked-seq?","c__5478__auto__","size__5479__auto__","b__22793","cljs.core/chunk-buffer","i__22792","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__22790","cljs.core/chunk-rest","cljs.core/cons","cljs.core/rest","fs__5477__auto__","cljs.core.concat","iter__22788","i","j","tictactoe.cljs.board/winner?","cljs.core/chunk-first"],"sourcesContent":["(ns tictactoe.cljs.board)\n\n(defn init-board\n  \"Initialize an empty board of the specified size.\"\n  [size]\n  (vec (repeat size (vec (repeat size \\space)))))\n\n(defn valid-move?\n  \"Check if a move is valid (within bounds and space is empty).\"\n  [board row col]\n  (and (< -1 row (count board))\n       (< -1 col (count board))\n       (= \\space (get-in board [row col]))))\n\n(defn place-mark\n  \"Place a mark on the board at the specified position.\"\n  [board row col mark]\n  (assoc-in board [row col] mark))\n\n(defn board-full?\n  \"Check if the board is completely filled.\"\n  [board]\n  (not-any? #(some #{\\space} %) board))\n\n(defn get-row\n  \"Get a specific row from the board.\"\n  [board row]\n  (nth board row))\n\n(defn get-col\n  \"Get a specific column from the board.\"\n  [board col]\n  (mapv #(nth % col) board))\n\n(defn get-diagonal\n  \"Get a diagonal line starting from [row col] in the specified direction.\"\n  [board row col [dx dy]]\n  (let [size (count board)]\n    (loop [r row, c col, result []]\n      (if (or (< r 0) (>= r size)\n              (< c 0) (>= c size))\n        result\n        (recur (+ r dx) (+ c dy)\n               (conj result (get-in board [r c])))))))\n\n(defn check-line\n  \"Check if a line contains a winning sequence.\"\n  [line player win-length]\n  (let [len (count line)]\n    (loop [start 0]\n      (if (> (+ start win-length) len)\n        false\n        (if (every? #(= player %) (subvec line start (+ start win-length)))\n          true\n          (recur (inc start)))))))\n\n(defn check-winner\n  \"Check if the specified player has won.\"\n  [board player win-length]\n  (let [size (count board)]\n    (or\n     ;; Check rows\n     (some #(check-line (get-row board %) player win-length)\n           (range size))\n     ;; Check columns\n     (some #(check-line (get-col board %) player win-length)\n           (range size))\n     ;; Check diagonals\n     (some #(let [[row col] %]\n              (or (check-line (get-diagonal board row col [1 1]) player win-length)\n                  (check-line (get-diagonal board row col [1 -1]) player win-length)))\n           (for [i (range size)\n                 j (range size)]\n             [i j])))))\n\n(defn winner?\n  \"Check if there is a winner on the board.\"\n  [board]\n  (let [win-length 5]\n    (or (check-winner board \\X win-length)\n        (check-winner board \\O win-length))))"]}