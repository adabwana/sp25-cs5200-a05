{"version":3,"sources":["tictactoe/cljs/core.cljc"],"mappings":"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","names":["var_args","G__22995","tictactoe.cljs.core/init-game","js/Error","tictactoe.cljs.core.init_game","tictactoe.cljs.config.settings/get-config","custom-config","config","tictactoe.cljs.config.settings/merge-config","tictactoe.cljs.board/init-board","tictactoe.cljs.core/switch-player","current-player","cljs.core._EQ_","tictactoe.cljs.core/check-game-status","state","map__22996","cljs.core/--destructure-map","cljs.core.get","map__22997","board","win-length","tictactoe.cljs.board/check-winner","cljs.core.assoc","tictactoe.cljs.board/board-full?","tictactoe.cljs.core/process-ai-move","map__23005","map__23006","ai-enabled","ai-player","and__5000__auto__","cljs.core/not","vec__23013","cljs.core.nth","ai-row","ai-col","tictactoe.cljs.ai.engine/get-best-move","new-board","tictactoe.cljs.board/place-mark","cljs.core.update","tictactoe.cljs.core/make-move","row","col","map__23016","game-over?","tictactoe.cljs.board/valid-move?"],"sourcesContent":["(ns tictactoe.cljs.core\n  (:require\n   [tictactoe.cljs.board :as board]\n   [tictactoe.cljs.config.settings :as settings]\n   [tictactoe.cljs.ai.engine :as ai-engine]))\n\n(defn init-game\n  \"Initialize a new game with optional custom configuration.\"\n  ([]\n   (init-game (settings/get-config [:default])))\n  ([custom-config]\n   (let [config (settings/merge-config custom-config)]\n     {:board (board/init-board (:board-size config))\n      :current-player \\X\n      :game-over? false\n      :winner nil\n      :config config})))\n\n(defn switch-player\n  \"Switch the current player.\"\n  [current-player]\n  (if (= current-player \\X) \\O \\X))\n\n(defn check-game-status\n  \"Check if the game is over and return updated state.\"\n  [state]\n  (let [{:keys [board current-player config]} state\n        {:keys [win-length]} config]\n    (cond\n      ;; Check if current player won\n      (board/check-winner board current-player win-length)\n      (assoc state\n             :game-over? true\n             :winner current-player)\n\n      ;; Check if board is full (draw)\n      (board/board-full? board)\n      (assoc state\n             :game-over? true\n             :winner nil)\n\n      ;; Game continues\n      :else state)))\n\n(defn process-ai-move\n  \"Process AI move if it's AI's turn.\"\n  [state]\n  (let [{:keys [board config]} state\n        {:keys [ai-enabled ai-player win-length]} config]\n    (if (and ai-enabled\n             (not (:game-over? state))\n             (= (:current-player state) ai-player))\n      (let [[ai-row ai-col] (ai-engine/get-best-move board ai-player win-length)]\n        (if (and ai-row ai-col)\n          (let [new-board (board/place-mark board ai-row ai-col ai-player)]\n            (-> state\n                (assoc :board new-board)\n                check-game-status\n                (update :current-player switch-player)))\n          state))\n      state)))\n\n(defn make-move\n  \"Make a move and return the updated game state.\"\n  [state row col]\n  (let [{:keys [board current-player game-over?]} state]\n    (if (and (not game-over?)\n             (board/valid-move? board row col))\n      (let [new-board (board/place-mark board row col current-player)]\n        (-> state\n            (assoc :board new-board)\n            check-game-status\n            (update :current-player switch-player)\n            process-ai-move))\n      state)))"]}