{"version":3,"sources":["tictactoe/cljs/ai/engine.cljc"],"mappings":";AAMA;;;gDAAA,hDAAOA,wGAEJC,MAAMC,MAAMC;AAFf,AAGE,IAAAC,mBAAI,WAAA,VAAOF;AAAX,AAAA,GAAAE;AAAAA;;AAAA,IAAAA,uBACI,AAACC,uCAAkBJ;AADvB,AAAA,GAAAG;AAAAA;;AAAA,IAAAA,uBAEI,wCAAA,xCAACE,kCAAmBL,UAASE;AAFjC,AAAA,oBAAAC;AAAAA;;AAGI,+CAAA,xCAACE,kCAAmBL,UAASE;;;;;AAEnC;;;+CAAA,/CAAOI,sGAEJC,MAAMC;AAFT,AAGE,QAAID,SAAMC;;AAEZ,AAAA,AAEA;;;wCAAA,xCAAOC,wFAEJT,MAAMU,KAAKT,MAAMU,cAAcC,KAAKV,WAAWK,MAAMC;AAFxD,AAGE,IAAAK,aAAgBH;UAAhB,AAAAI,4CAAAD,WAAA,IAAA,jEAAOE;UAAP,AAAAD,4CAAAD,WAAA,IAAA,jEAAWG;IACLC,WAAS,0DAAA,IAAA,5DAAI,kDAAA,lDAACC,6CAAEN;IAChBO,eAAa,kBAAIR,eAAcC,KAAKK;IACpCG,YAAU,AAACC,gCAAiBrB,MAAMe,IAAIC,IAAIG;AAHhD,AAIE,oBAAI,AAACpB,8CAAeqB,UAAUnB,MAAMC;AAApC,0FACG,AAACoB,+CAAwBF,UAAUR,KAAKV,YAAYQ;;AACrD,IAAAa,aAAgB,iBAAAG,WAAS1B;IAAT2B,WACS,SAAA,RAAK1B;IADd2B,WAES,AAACM,cAAIvB;IAFdkB,WAGSjB;IAHTkB,WAIS5B;IAJT6B,WAKSxB;IALTyB,WAMSxB;AANT,AAAA,wIAAAkB,SAAAC,SAAAC,SAAAC,SAAAC,SAAAC,SAAAC,wDAAAN,SAAAC,SAAAC,SAAAC,SAAAC,SAAAC,SAAAC,pSAACC,iEAAAA,iIAAAA;;YAAjB,AAAAnB,4CAAAS,WAAA,IAAA,nEAAOC;QAAP,AAAAV,4CAAAS,WAAA,IAAA,/DAAaE;AAAb,AAAA,0FAOGD,MAAMd;;;AAEf;;;6CAAA,7CAAOyB,kGAEJnC,MAAMoC,MAAMnC,MAAMU,cAAcC,KAAKV,WAAWK,MAAMC;AAFzD,AAGE,IAAA6B,aAAsC,0CAAA,mFAAA,7HAACK;IAAvCL,iBAAA,AAAAC,4BAAAD;eAAA,AAAAE,4CAAAF,eAAA,tEAAcG;mBAAd,AAAAD,4CAAAF,eAAA,1EAAuBI;AAAvB,AACE,IAAOE,kBAAgBP;IAChB7B,YAAMA;IACNC,WAAKA;IACLoC,aAAW,kBAAIjC,eAAc8B,aAAaD;gBAHjD,ZAIOK;;AAJP,AAKE,GAAI,EAAI,AAACC,uBAAOH,sBAAiB,AAACrC,6CAAcC,UAAMC;AAAtD,0FACGoC,WAAWC;;AACZ,IAAMnC,OAAK,AAACuC,gBAAMN;IAAlBI,aACyB,AAACtC,sCAAaT,MACAU,KACAT,MACAU,cACAC,KACAV,WACAK,UACAC;YARvC,AAAAM,4CAAAiC,WAAA,IAAA,nEACOvB;iBADP,AAAAV,4CAAAiC,WAAA,IAAA,xEACaG;IADbF,aAS2B,+EAAA,4GAAA,zLAAI,kBAAIrC,eAAc,CAAGa,QAAMoB,YAAY,CAAGpB,QAAMoB,iGACjDpB,MAAM0B,sGACNN,WAAWC;gBAXzC,AAAA/B,4CAAAkC,WAAA,IAAA,vEASOG;eATP,AAAArC,4CAAAkC,WAAA,IAAA,tEASiBI;IAGXC,YAAU,kBAAI1C,eAAc,iBAAA2C,kBAAK/C;IAALgD,kBAAW/B;AAAX,AAAA,SAAA8B,kBAAAC,mBAAAD,kBAAAC;KAAkBhD;IAC9CiD,WAAS,kBAAI7C,eAAcH,SAAK,iBAAAiD,kBAAKjD;IAALkD,kBAAUlC;AAAV,AAAA,SAAAiC,kBAAAC,mBAAAD,kBAAAC;;AAbtC,AAcE,eAAO,AAACC,eAAKhB;eACNU;eACAG;eACAL;eACAC;;;;;;;;;;;AAEjB;;;mCAAA,nCAAOnB,8EAEJjC,MAAMC,MAAMU,cAAcC,KAAKV,WAAWK,MAAMC;AAFnD,AAGE,oBAAI,AAACT,8CAAeC,MAAMC,MAAMC;AAAhC,gKAAA,tEACG,AAACoB,+CAAwBtB,MAAMY,KAAKV;;AACrC,OAACiC,2CAAkBnC,MACA,AAAC4D,yCAAkB,AAACC,iDAA0B7D,OAAO,AAAC8D,gBAAM9D,QAC5DC,MACAU,cACAC,KACAV,WACAK,MACAC;;;AAEvB;;;yCAAA,zCAAMuD,0FAEH/D,MAAMY,KAAKV;AAFd,AAGE,IAAA8D,aAAgD,0CAAA,mFAAA,7HAACtB;IAAjDsB,iBAAA,AAAA1B,4BAAA0B;gBAAA,AAAAzB,4CAAAyB,eAAA,vEAAcC;eAAd,AAAA1B,4CAAAyB,eAAA,tEAAwBxB;mBAAxB,AAAAD,4CAAAyB,eAAA,1EAAiCvB;IAC3ByB,eAAa,AAACC,+CAAwBnE,MAAMY,KAAKV;IACjDkE,gBAAc,AAACC,gDAAyBrE,MAAMY,KAAKV;AAFzD,AAGE,oBAEEgE;AAAaA;;AAFf,oBAIEE;AAAcA;;AAJhB,AAMQ,IAAAE,aAAe,oLAAA,pLAACnC,2CAAkBnC,MACA,AAAC4D,yCAAkB,AAACC,iDAA0B7D,OAAO,AAAC8D,gBAAM9D,QAC5DiE,eAEArD,KACAV,WACAuC,aACAD;QAPlC,AAAA1B,4CAAAwD,WAAA,IAAA,/DAAO7C;WAAP,AAAAX,4CAAAwD,WAAA,IAAA,lEAAS5D;AAAT,AAQEA","names":["tictactoe.cljs.ai.engine/terminal-node?","board","depth","win-length","or__5002__auto__","tictactoe.cljs.board/board-full?","tictactoe.cljs.board/check-winner","tictactoe.cljs.ai.engine/should-prune?","alpha","beta","tictactoe.cljs.ai.engine/minimax-step","move","is-maximizing","mark","vec__22939","cljs.core.nth","row","col","opponent","cljs.core._EQ_","current-mark","new-board","tictactoe.cljs.board/place-mark","tictactoe.cljs.ai.strategies/evaluate-position","vec__22942","score","_","G__22945","G__22946","G__22947","G__22948","G__22949","G__22950","G__22951","tictactoe.cljs.ai.engine/minimax","cljs.core/not","tictactoe.cljs.ai.engine/alpha-beta-search","moves","map__22952","cljs.core/--destructure-map","cljs.core.get","infinity","neg-infinity","tictactoe.cljs.config.settings/get-config","remaining-moves","best-score","best-move","cljs.core/empty?","vec__22966","vec__22969","cljs.core/first","final-move","new-score","new-move","new-alpha","x__5087__auto__","y__5088__auto__","new-beta","x__5090__auto__","y__5091__auto__","cljs.core/rest","tictactoe.cljs.ai.strategies/order-moves","tictactoe.cljs.ai.strategies/get-available-moves","cljs.core/count","tictactoe.cljs.ai.engine/get-best-move","map__22984","max-depth","winning-move","tictactoe.cljs.ai.strategies/find-winning-move","blocking-move","tictactoe.cljs.ai.strategies/find-blocking-move","vec__22987"],"sourcesContent":["(ns tictactoe.cljs.ai.engine\n  (:require\n   [tictactoe.cljs.board :as board]\n   [tictactoe.cljs.config.settings :as settings]\n   [tictactoe.cljs.ai.strategies :as strat]))\n\n(defn- terminal-node?\n  \"Check if the position is terminal (game over)\"\n  [board depth win-length]\n  (or (zero? depth)\n      (board/board-full? board)\n      (board/check-winner board \\X win-length)\n      (board/check-winner board \\O win-length)))\n\n(defn- should-prune?\n  \"Determine if we should prune the search\"\n  [alpha beta]\n  (>= alpha beta))\n\n(declare minimax)\n\n(defn- minimax-step\n  \"Process a single step in the minimax algorithm\"\n  [board move depth is-maximizing mark win-length alpha beta]\n  (let [[row col] move\n        opponent (if (= mark \\X) \\O \\X)\n        current-mark (if is-maximizing mark opponent)\n        new-board (board/place-mark board row col current-mark)]\n    (if (terminal-node? new-board depth win-length)\n      [(strat/evaluate-position new-board mark win-length) move]\n      (let [[score _] (minimax board\n                               (dec depth)\n                               (not is-maximizing)\n                               mark\n                               win-length\n                               alpha\n                               beta)]\n        [score move]))))\n\n(defn- alpha-beta-search\n  \"Perform alpha-beta search on a list of moves\"\n  [board moves depth is-maximizing mark win-length alpha beta]\n  (let [{:keys [infinity neg-infinity]} (settings/get-config [:ai])]\n    (loop [remaining-moves moves\n           alpha alpha\n           beta beta\n           best-score (if is-maximizing neg-infinity infinity)\n           best-move nil]\n      (if (or (empty? remaining-moves) (should-prune? alpha beta))\n        [best-score best-move]\n        (let [move (first remaining-moves)\n              [score final-move] (minimax-step board\n                                               move\n                                               depth\n                                               is-maximizing\n                                               mark\n                                               win-length\n                                               alpha\n                                               beta)\n              [new-score new-move] (if (if is-maximizing (> score best-score) (< score best-score))\n                                     [score final-move]\n                                     [best-score best-move])\n              new-alpha (if is-maximizing (max alpha score) alpha)\n              new-beta (if is-maximizing beta (min beta score))]\n          (recur (rest remaining-moves)\n                 new-alpha\n                 new-beta\n                 new-score\n                 new-move))))))\n\n(defn- minimax\n  \"Minimax algorithm with alpha-beta pruning\"\n  [board depth is-maximizing mark win-length alpha beta]\n  (if (terminal-node? board depth win-length)\n    [(strat/evaluate-position board mark win-length) nil]\n    (alpha-beta-search board\n                       (strat/order-moves (strat/get-available-moves board) (count board))\n                       depth\n                       is-maximizing\n                       mark\n                       win-length\n                       alpha\n                       beta)))\n\n(defn get-best-move\n  \"Get the best move for the current board position\"\n  [board mark win-length]\n  (let [{:keys [max-depth infinity neg-infinity]} (settings/get-config [:ai])\n        winning-move (strat/find-winning-move board mark win-length)\n        blocking-move (strat/find-blocking-move board mark win-length)]\n    (cond\n      ;; If we can win, take it\n      winning-move winning-move\n      ;; If opponent can win, block it\n      blocking-move blocking-move\n      ;; Otherwise use minimax with alpha-beta pruning\n      :else (let [[_ move] (alpha-beta-search board\n                                              (strat/order-moves (strat/get-available-moves board) (count board))\n                                              max-depth\n                                              true\n                                              mark\n                                              win-length\n                                              neg-infinity\n                                              infinity)]\n              move))))"]}