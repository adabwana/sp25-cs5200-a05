{"version":3,"sources":["tictactoe/cljs/ai/strategies.cljc"],"mappings":"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","names":["tictactoe.cljs.ai.strategies/evaluate-position","cljs.core/memoize","board","mark","win-length","map__22841","cljs.core/--destructure-map","cljs.core.get","win-score","lose-score","draw-score","tictactoe.cljs.config.settings/get-config","tictactoe.cljs.board/check-winner","cljs.core._EQ_","tictactoe.cljs.board/board-full?","tictactoe.cljs.ai.strategies/get-available-moves","cljs.core/persistent!","cljs.core.reduce","moves","row","acc","col","tictactoe.cljs.board/valid-move?","cljs.core.conj_BANG_","cljs.core.range","cljs.core/count","cljs.core/transient","tictactoe.cljs.ai.strategies/center-distance","p__22871","vec__22874","cljs.core.nth","board-size","center","cljs.core/quot","Math/abs","tictactoe.cljs.ai.strategies/move-scores-cache","cljs.core.atom","tictactoe.cljs.ai.strategies/calculate-move-scores","scores","pos","vec__22884","dist","is-center?","is-corner?","cljs.core.assoc_BANG_","iter__5480__auto__","s__22890","cljs.core/LazySeq","temp__5823__auto__","cljs.core/seq","xs__6383__auto__","cljs.core/first","iterys__5476__auto__","s__22892","cljs.core/chunked-seq?","c__5478__auto__","size__5479__auto__","b__22894","cljs.core/chunk-buffer","i__22893","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__22891","cljs.core/chunk-rest","cljs.core/cons","cljs.core/rest","fs__5477__auto__","cljs.core.concat","iter__22889","tictactoe.cljs.ai.strategies/get-move-scores","temp__5821__auto__","cljs.core/deref","cljs.core.swap_BANG_","cljs.core/assoc","tictactoe.cljs.ai.strategies/order-moves","p1__22902#","cljs.core.sort_by","tictactoe.cljs.ai.strategies/would-win?","new-board","tictactoe.cljs.board/place-mark","tictactoe.cljs.ai.strategies/find-winning-move","s__22907","b__22909","i__22908","vec__22910","iter__22906","vec__22913","p1__22905#","s__22919","s__22921","b__22923","i__22922","iter__22920","iter__22918","tictactoe.cljs.ai.strategies/find-blocking-move","cljs.core/chunk-first"],"sourcesContent":["(ns tictactoe.cljs.ai.strategies\n  (:require\n   [tictactoe.cljs.board :as board]\n   [tictactoe.cljs.config.settings :as settings]))\n\n;; ## Score Evaluation\n\n(def evaluate-position\n  (memoize\n   (fn [board mark win-length]\n     (let [{:keys [win-score lose-score draw-score]}\n           (settings/get-config [:ai])]\n       (cond\n         (board/check-winner board mark win-length) win-score\n         (board/check-winner board (if (= mark \\X) \\O \\X) win-length) lose-score\n         (board/board-full? board) draw-score\n         :else 0)))))\n\n;; ## Move Generation\n\n(defn get-available-moves\n  \"Get all available moves on the board using transients for better performance\"\n  [board]\n  (persistent!\n   (reduce\n    (fn [moves row]\n      (reduce\n       (fn [acc col]\n         (if (board/valid-move? board row col)\n           (conj! acc [row col])\n           acc))\n       moves\n       (range (count board))))\n    (transient [])\n    (range (count board)))))\n\n;; ## Move Scoring\n\n(def center-distance\n  (memoize\n   (fn [[row col] board-size]\n     (let [center (quot board-size 2)]\n       (+ (Math/abs (- row center))\n          (Math/abs (- col center)))))))\n\n;; Cache for move scoring\n(def move-scores-cache (atom {}))\n\n(defn- calculate-move-scores\n  \"Pre-calculate scores for all possible moves on a board size using transients\"\n  [board-size]\n  (persistent!\n   (reduce\n    (fn [scores pos]\n      (let [[row col] pos\n            center (quot board-size 2)\n            dist (center-distance pos board-size)\n            is-center? (= pos [center center])\n            is-corner? (and (or (= row 0) (= row (dec board-size)))\n                            (or (= col 0) (= col (dec board-size))))]\n        (assoc! scores pos\n                (cond\n                  is-center? 0\n                  is-corner? (inc dist)\n                  :else (+ dist 2)))))\n    (transient {})\n    (for [row (range board-size)\n          col (range board-size)]\n      [row col]))))\n\n(def get-move-scores\n  (memoize\n   (fn [board-size]\n     (if-let [scores (get @move-scores-cache board-size)]\n       scores\n       (let [scores (calculate-move-scores board-size)]\n         (swap! move-scores-cache assoc board-size scores)\n         scores)))))\n\n(defn order-moves\n  \"Order moves to improve alpha-beta pruning efficiency\"\n  [moves board-size]\n  (let [scores (get-move-scores board-size)]\n    (sort-by #(get scores %) moves)))\n\n;; ## Winning Move Detection\n\n(defn would-win?\n  \"Check if placing a mark at the given position would create a win\"\n  [board row col mark win-length]\n  (when (board/valid-move? board row col)\n    (let [new-board (board/place-mark board row col mark)]\n      (board/check-winner new-board mark win-length))))\n\n(def find-winning-move\n  (memoize\n   (fn [board mark win-length]\n     (let [board-size (count board)\n           scores (get-move-scores board-size)]\n       (first\n        (for [[row col] (sort-by #(get scores %)\n                                 (for [row (range board-size)\n                                       col (range board-size)\n                                       :when (board/valid-move? board row col)]\n                                   [row col]))\n              :when (would-win? board row col mark win-length)]\n          [row col]))))))\n\n(defn find-blocking-move\n  \"Find a move that blocks the opponent's win\"\n  [board mark win-length]\n  (find-winning-move board (if (= mark \\X) \\O \\X) win-length))"]}